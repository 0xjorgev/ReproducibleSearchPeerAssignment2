dataset[logic & toupper(dataset[, index]) == "M", index] <- "6"
dataset[logic & toupper(dataset[, index]) == "K", index] <- "3"
dataset[logic & toupper(dataset[, index]) == "H", index] <- "2"
dataset[logic & toupper(dataset[, index]) == "", index] <- "0"
dataset[, index] <- as.numeric(dataset[, index])
dataset[is.na(dataset[, index]), index] <- 0
dataset <- cbind(dataset, dataset[, index - 1] * 10^dataset[, index])
names(dataset)[totalLen + 1] <- newFieldName
return(dataset)
}
fatalities <- sortUtil("FATALITIES", 20, dataSource)
injuries <- sortUtil("INJURIES", 20, dataSource)
dataSource <- unitsConververUtil(dataSource, "PROPDMGEXP", "PROPERTYDAMAGE")
dataSource <- unitsConververUtil(dataSource, "CROPDMGEXP", "CROPDAMAGE")
names(dataSource)
options(scipen=999)
property <- sortUtil("PROPERTYDAMAGE", dataset = dataSource)
crop <- sortUtil("CROPDAMAGE", dataset = dataSource)
sortUtil <- function(fieldName, top, dataset = stormData) {
index <- which(colnames(dataset) == fieldName)
field <- aggregate(dataset[, index], by = list(dataset$EVTYPE), FUN = "sum")
names(field) <- c("EVTYPE", fieldName)
field <- arrange(field, field[, 2], decreasing = T)
field <- head(field, n = top)
field <- within(field, EVTYPE <- factor(x = EVTYPE, levels = field$EVTYPE))
return(field)
}
unitsConververUtil <- function(dataset = storm, fieldName, newFieldName) {
totalLen <- dim(dataset)[2]
index <- which(colnames(dataset) == fieldName)
dataset[, index] <- as.character(dataset[, index])
logic <- !is.na(toupper(dataset[, index]))
dataset[logic & toupper(dataset[, index]) == "B", index] <- "9"
dataset[logic & toupper(dataset[, index]) == "M", index] <- "6"
dataset[logic & toupper(dataset[, index]) == "K", index] <- "3"
dataset[logic & toupper(dataset[, index]) == "H", index] <- "2"
dataset[logic & toupper(dataset[, index]) == "", index] <- "0"
dataset[, index] <- as.numeric(dataset[, index])
dataset[is.na(dataset[, index]), index] <- 0
dataset <- cbind(dataset, dataset[, index - 1] * 10^dataset[, index])
names(dataset)[totalLen + 1] <- newFieldName
return(dataset)
}
fatalities <- sortUtil("FATALITIES", 20, dataSource)
injuries <- sortUtil("INJURIES", 20, dataSource)
dataSource <- unitsConververUtil(dataSource, "PROPDMGEXP", "PROPERTYDAMAGE")
dataSource <- unitsConververUtil(dataSource, "CROPDMGEXP", "CROPDAMAGE")
names(dataSource)
options(scipen=999)
property <- sortUtil("PROPERTYDAMAGE", dataset = dataSource)
crop <- sortUtil("CROPDAMAGE", dataset = dataSource)
property <- sortUtil("PROPERTYDAMAGE", 20, dataset = dataSource)
crop <- sortUtil("CROPDAMAGE", 20, dataset = dataSource)
property <- sortUtil("PROPERTYDAMAGE", 20, dataSource)
crop <- sortUtil("CROPDAMAGE", 20, dataSource)
dataSource$YEAR <- as.numeric(format(as.Date(dataSource$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
names(dataSource)
property <- sortUtil("PROPERTYDAMAGE", 20, dataSource)
smallDataSource = dataSource[dataSource$YEAR >= 1990, ]
fatalities <- sortUtil("FATALITIES", 20, smallDataSource)
injuries <- sortUtil("INJURIES", 20, smallDataSource)
smallDataSource <- unitsConververUtil(smallDataSource, "PROPDMGEXP", "PROPERTYDAMAGE")
smallDataSource <- unitsConververUtil(smallDataSource, "CROPDMGEXP", "CROPDAMAGE")
names(smallDataSource)
options(scipen=999)
property <- sortUtil("PROPERTYDAMAGE", 20, smallDataSource)
crop <- sortUtil("CROPDAMAGE", 20, smallDataSource)
View(smallDataSource)
property <- sortUtil("PROPDMGEXP", 20, smallDataSource)
property
smallDataSource$PROPERTYDAMAGE
View(csvStromData)
sortUtil <- function(fieldName, top, dataset) {
index <- which(colnames(dataset) == fieldName)
field <- aggregate(dataset[, index], by = list(dataset$EVTYPE), FUN = "sum")
names(field) <- c("EVTYPE", fieldName)
field <- arrange(field, field[, 2], decreasing = T)
field <- head(field, n = top)
field <- within(field, EVTYPE <- factor(x = EVTYPE, levels = field$EVTYPE))
return(field)
}
unitsConververUtil <- function(dataset, fieldName, newFieldName) {
totalLen <- dim(dataset)[2]
index <- which(colnames(dataset) == fieldName)
dataset[, index] <- as.character(dataset[, index])
logic <- !is.na(toupper(dataset[, index]))
dataset[logic & toupper(dataset[, index]) == "B", index] <- "9"
dataset[logic & toupper(dataset[, index]) == "M", index] <- "6"
dataset[logic & toupper(dataset[, index]) == "K", index] <- "3"
dataset[logic & toupper(dataset[, index]) == "H", index] <- "2"
dataset[logic & toupper(dataset[, index]) == "", index] <- "0"
dataset[, index] <- as.numeric(dataset[, index])
dataset[is.na(dataset[, index]), index] <- 0
dataset <- cbind(dataset, dataset[, index - 1] * 10^dataset[, index])
names(dataset)[totalLen + 1] <- newFieldName
return(dataset)
}
fatalities <- sortUtil("FATALITIES", 20, smallDataSource)
injuries <- sortUtil("INJURIES", 20, smallDataSource)
property <- sortUtil("PROPERTYDAMAGE", 20, smallDataSource)
smallDataSource <- unitsConververUtil(smallDataSource, "PROPDMG", "PROPERTYDAMAGE")
smallDataSource <- unitsConververUtil(smallDataSource, "CROPDMG", "CROPDAMAGE")
property <- sortUtil("PROPERTYDAMAGE", 20, smallDataSource)
property <- sortUtil("PROPERTYDAMAGE", 20, smallDataSource)
crop <- sortUtil("CROPDAMAGE", 20, smallDataSource)
property <- sortUtil("PROPDMG", 20, smallDataSource)
View(property)
smallDataSource$PROPERTYDAMAGE
class(smallDataSource$PROPERTYDAMAGE)
(smallDataSource$PROPERTYDAMAGE is na)
(smallDataSource$PROPERTYDAMAGE == na)
(smallDataSource$PROPERTYDAMAGE == NA)
smallDataSource$PROPERTYDAMAGE == NA
testNA = smallDataSource$PROPERTYDAMAGE == NA
testNA.count
length(testNA)
first(testNA)
top(testNA)
head(testNA)
names(smallDataSource)
library(ggplot2)
library(imputeMissings)
library(utils)
library(plyr)
library(grid)
require(gridExtra)
if(!file.exists('./data/repdata-data-StormData.csv')){
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url=url, destfile='./data/repdata-data-StormData.csv.bz2', method='curl')
filePath <- "./data/repdata-data-StormData.csv.bz2"
destPath <- "./data/repdata-data-StormData.csv"
bunzip2(filePath,destPath,overwrite=TRUE, remove=FALSE)
}
csvStromData = read.csv("./data/repdata-data-StormData.csv", sep = ",")
requiredColNames <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
dataSource <- csvStromData[, requiredColNames]
dataSource$YEAR <- as.numeric(format(as.Date(dataSource$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
sortUtil <- function(fieldName, top, dataset) {
index <- which(colnames(dataset) == fieldName)
field <- aggregate(dataset[, index], by = list(dataset$EVTYPE), FUN = "sum")
names(field) <- c("EVTYPE", fieldName)
field <- arrange(field, field[, 2], decreasing = T)
field <- head(field, n = top)
field <- within(field, EVTYPE <- factor(x = EVTYPE, levels = field$EVTYPE))
return(field)
}
unitsConververUtil <- function(dataset, fieldName, newFieldName) {
totalLen <- dim(dataset)[2]
index <- which(colnames(dataset) == fieldName)
dataset[, index] <- as.character(dataset[, index])
logic <- !is.na(toupper(dataset[, index]))
dataset[logic & toupper(dataset[, index]) == "B", index] <- "9"
dataset[logic & toupper(dataset[, index]) == "M", index] <- "6"
dataset[logic & toupper(dataset[, index]) == "K", index] <- "3"
dataset[logic & toupper(dataset[, index]) == "H", index] <- "2"
dataset[logic & toupper(dataset[, index]) == "", index] <- "0"
dataset[, index] <- as.numeric(dataset[, index])
dataset[is.na(dataset[, index]), index] <- 0
dataset <- cbind(dataset, dataset[, index - 1] * 10^dataset[, index])
names(dataset)[totalLen + 1] <- newFieldName
return(dataset)
}
smallDataSource = dataSource[dataSource$YEAR >= 1990, ]
fatalities <- sortUtil("FATALITIES", 20, smallDataSource)
injuries <- sortUtil("INJURIES", 20, smallDataSource)
smallDataSource <- unitsConververUtil(smallDataSource, "PROPDMG", "PROPERTYDAMAGE")
smallDataSource <- unitsConververUtil(smallDataSource, "CROPDMG", "CROPDAMAGE")
names(smallDataSource)
options(scipen=999)
property <- sortUtil("PROPDMG", 20, smallDataSource)
crop <- sortUtil("CROPDAMAGE", 20, smallDataSource)
View(property)
property <- sortUtil("PROPERTYDAMAGE", 20, smallDataSource)
View(property)
crop <- sortUtil("CROPDAMAGE", 20, smallDataSource)
View(crop)
View(csvStromData)
View(crop)
crop <- sortUtil("CROPDMG", 20, smallDataSource)
View(property)
options(scipen = 1)
property <- sortUtil("PROPDMG", 20, smallDataSource)
View(property)
crop <- sortUtil("CROPDMG", 20, smallDataSource)
View(crop)
crop <- sortUtil("CROPDAMAGE", 20, smallDataSource)
View(crop)
View(smallDataSource)
property <- sortUtil("PROPERTYDAMAGE", 20, smallDataSource)
View(property)
class(smallDataSource$CROPDAMAGE)
class(smallDataSource$CROPDMG)
8.854377e+03
index <- which(colnames(smallDataSource) == "PROPDMG")
index
powerOf <- index+1
powerOf
smallDataSource[powerOf]
smallDataSource[1][powerOf]
exponent <- smallDataSource[powerOf]
exponent[1]
exponent[,1]
head(exponent)
xx <- if (smallDataSource[powerOf] == "M") return 6
logic <- !is.na(toupper(dasmallDataSourcetaset[, index]))
logic <- !is.na(toupper(smallDataSourcetaset[, index]))
logic <- !is.na(toupper(smallDataSource[, index]))
head(logic)
smallDataSource[toupper(dataset[, index]) == "B", index] <- "9"]
smallDataSource[toupper(dataset[, index]) == "B", index] <- "9"
smallDataSource[toupper(smallDataSource[, index]) == "B", index] <- "9"
head(smallDataSource)
smallDataSource[toupper(smallDataSource[, index]) == "M", index] <- "6"
head(smallDataSource)
tenPowerOf <- smallDataSource[logic & toupper(smallDataSource[, index]) == "B", index] <- "9"
smallDataSource[logic & toupper(smallDataSource[, index]) == "M", index] <- "6"
smallDataSource[logic & toupper(smallDataSource[, index]) == "K", index] <- "3"
smallDataSource[logic & toupper(smallDataSource[, index]) == "H", index] <- "2"
smallDataSource[logic & toupper(smallDataSource[, index]) == "", index] <- "0"
smallDataSource[, index] <- as.numeric(smallDataSource[, index])
smallDataSource[is.na(smallDataSource[, index]), index] <- 0
head(tenPowerOf)
tenPowerOf
testVal <- smallDataSource[5] * 10 ^ tenPowerOf
testVal <- smallDataSource[5] * 10^tenPowerOf
testVal <- smallDataSource[5] * 10^(tenPowerOf[1])
10^(tenPowerOf[1])
10^(tenPowerOf[0])
10^(6)
tenPowerOf
10^tenPowerOf
10^[tenPowerOf]
10^tenPowerOf
10^tenPowerOf[,1]
class(tenPowerOf)
tenPowerOf <- smallDataSource[logic & toupper(smallDataSource[, index]) == "B", index] <- 9
> smallDataSource[logic & toupper(smallDataSource[, index]) == "M", index] <- 6
> smallDataSource[logic & toupper(smallDataSource[, index]) == "K", index] <- 3
> smallDataSource[logic & toupper(smallDataSource[, index]) == "H", index] <- 2
> smallDataSource[logic & toupper(smallDataSource[, index]) == "", index] <- 0
> smallDataSource[, index] <- as.numeric(smallDataSource[, index])
> smallDataSource[is.na(smallDataSource[, index]), index] <- 0
tenPowerOf <- smallDataSource[logic & toupper(smallDataSource[, index]) == "B", index] <- "9"
> smallDataSource[logic & toupper(smallDataSource[, index]) == "M", index] <- "6"
> smallDataSource[logic & toupper(smallDataSource[, index]) == "K", index] <- "3"
> smallDataSource[logic & toupper(smallDataSource[, index]) == "H", index] <- "2"
> smallDataSource[logic & toupper(smallDataSource[, index]) == "", index] <- "0"
> smallDataSource[, index] <- as.numeric(smallDataSource[, index])
> smallDataSource[is.na(smallDataSource[, index]), index] <- 0
tenPowerOf <- smallDataSource[logic & toupper(smallDataSource[, index]) == "B", index] <- 9
smallDataSource[logic & toupper(smallDataSource[, index]) == "M", index] <- 6
smallDataSource[logic & toupper(smallDataSource[, index]) == "K", index] <- 3
smallDataSource[logic & toupper(smallDataSource[, index]) == "H", index] <- 2
smallDataSource[logic & toupper(smallDataSource[, index]) == "", index] <- 0
smallDataSource[, index] <- as.numeric(smallDataSource[, index])
smallDataSource[is.na(smallDataSource[, index]), index] <- 0
tenPowerOf
10^tenPowerOf
smallDataSource <- unitsConververUtil(smallDataSource, "PROPDMGEXP", "PROPERTYDAMAGE")
library(ggplot2)
library(imputeMissings)
library(utils)
library(plyr)
library(grid)
require(gridExtra)
options(scipen = 1)
if(!file.exists('./data/repdata-data-StormData.csv')){
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url=url, destfile='./data/repdata-data-StormData.csv.bz2', method='curl')
filePath <- "./data/repdata-data-StormData.csv.bz2"
destPath <- "./data/repdata-data-StormData.csv"
bunzip2(filePath,destPath,overwrite=TRUE, remove=FALSE)
}
csvStromData = read.csv("./data/repdata-data-StormData.csv", sep = ",")
requiredColNames <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
dataSource <- csvStromData[, requiredColNames]
dataSource$YEAR <- as.numeric(format(as.Date(dataSource$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
sortUtil <- function(fieldName, top, dataset) {
index <- which(colnames(dataset) == fieldName)
field <- aggregate(dataset[, index], by = list(dataset$EVTYPE), FUN = "sum")
names(field) <- c("EVTYPE", fieldName)
field <- arrange(field, field[, 2], decreasing = T)
field <- head(field, n = top)
field <- within(field, EVTYPE <- factor(x = EVTYPE, levels = field$EVTYPE))
return(field)
}
unitsConververUtil <- function(dataset, fieldName, newFieldName) {
totalLen <- dim(dataset)[2]
index <- which(colnames(dataset) == fieldName)
dataset[, index] <- as.character(dataset[, index])
logic <- !is.na(toupper(dataset[, index]))
dataset[logic & toupper(dataset[, index]) == "B", index] <- "9"
dataset[logic & toupper(dataset[, index]) == "M", index] <- "6"
dataset[logic & toupper(dataset[, index]) == "K", index] <- "3"
dataset[logic & toupper(dataset[, index]) == "H", index] <- "2"
dataset[logic & toupper(dataset[, index]) == "", index] <- "0"
dataset[, index] <- as.numeric(dataset[, index])
dataset[is.na(dataset[, index]), index] <- 0
dataset <- cbind(dataset, dataset[, index - 1] * 10^dataset[, index])
names(dataset)[totalLen + 1] <- newFieldName
return(dataset)
}
smallDataSource = dataSource[dataSource$YEAR >= 1990, ]
fatalities <- sortUtil("FATALITIES", 20, smallDataSource)
injuries <- sortUtil("INJURIES", 20, smallDataSource)
smallDataSource <- unitsConververUtil(smallDataSource, "PROPDMGEXP", "PROPERTYDAMAGE")
smallDataSource <- unitsConververUtil(smallDataSource, "CROPDMGEXP", "CROPDAMAGE")
names(smallDataSource)
options(scipen=999)
property <- sortUtil("PROPERTYDAMAGE", 20, smallDataSource)
crop <- sortUtil("CROPDAMAGE", 20, smallDataSource)
View(crop)
View(property)
fatalitiesPlot <- qplot(EVTYPE, data = fatalities, weight = FATALITIES, geom = "bar", binwidth = 1) +
scale_y_continuous("Number of Fatalities") +
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) + xlab("Severe Weather Type") +
ggtitle("Total Fatalities by Severe Weather\n Events in the U.S.\n from 1995 - 2011")
injuriesPlot <- qplot(EVTYPE, data = injuries, weight = INJURIES, geom = "bar", binwidth = 1) +
scale_y_continuous("Number of Injuries") +
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) + xlab("Severe Weather Type") +
ggtitle("Total Injuries by Severe Weather\n Events in the U.S.\n from 1995 - 2011")
grid.arrange(fatalitiesPlot, injuriesPlot, ncol = 2)
fatalitiesPlot <- plot(EVTYPE, data = fatalities)
fatalitiesPlot <- qplot(EVTYPE, data = fatalities, weight = FATALITIES, geom = "histogram", binwidth = 1) +
scale_y_continuous("Number of Fatalities") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + xlab("Severe Weather Type") +
ggtitle("Total Fatalities by Severe Weather\n Events in the U.S.\n from 1995 - 2011")
View(fatalities)
ggplot(data=fatalities, aes(x=fatalities.EVTYPE, y=fatalities.FATALITIES)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=fatalities, aes(x=EVTYPE, y=FATALITIES)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(injuries)
ggplot(data=injuries, aes(x=EVTYPE, y=INJURIES)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=injuries, aes(x=EVTYPE, y=PROPERTYDAMAGE)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(property)
ggplot(data=property, aes(x=EVTYPE, y=PROPERTYDAMAGE)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=crop, aes(x=EVTYPE, y=CROPDAMAGE)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=property, aes(x=EVTYPE, y=PROPERTYDAMAGE)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=crop, aes(x=EVTYPE, y=CROPDAMAGE)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
source('~/dataScience/Course V/Assigment-2/Reproducible-Research-Assigment-2.R')
ggplot(data=crop, aes(x=EVTYPE, y=CROPDAMAGE)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(imputeMissings)
library(utils)
library(plyr)
library(grid)
#options(scipen = 1)
if(!file.exists('./data/repdata-data-StormData.csv')){
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url=url, destfile='./data/repdata-data-StormData.csv.bz2', method='curl')
filePath <- "./data/repdata-data-StormData.csv.bz2"
destPath <- "./data/repdata-data-StormData.csv"
bunzip2(filePath,destPath,overwrite=TRUE, remove=FALSE)
}
csvStromData = read.csv("./data/repdata-data-StormData.csv", sep = ",")
library(ggplot2)
library(imputeMissings)
library(utils)
library(plyr)
library(grid)
#options(scipen = 1)
if(!file.exists('./data/repdata-data-StormData.csv')){
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url=url, destfile='./data/repdata-data-StormData.csv.bz2', method='curl')
filePath <- "./data/repdata-data-StormData.csv.bz2"
destPath <- "./data/repdata-data-StormData.csv"
bunzip2(filePath,destPath,overwrite=TRUE, remove=FALSE)
}
csvStromData = read.csv("./data/repdata-data-StormData.csv", sep = ",")
requiredColNames <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
dataSource <- csvStromData[, requiredColNames]
dataSource$YEAR <- as.numeric(format(as.Date(dataSource$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
sortUtil <- function(fieldName, top, dataset) {
index <- which(colnames(dataset) == fieldName)
field <- aggregate(dataset[, index], by = list(dataset$EVTYPE), FUN = "sum")
names(field) <- c("EVTYPE", fieldName)
field <- arrange(field, field[, 2], decreasing = T)
field <- head(field, n = top)
field <- within(field, EVTYPE <- factor(x = EVTYPE, levels = field$EVTYPE))
return(field)
}
unitsConververUtil <- function(dataset, fieldName, newFieldName) {
totalLen <- dim(dataset)[2]
index <- which(colnames(dataset) == fieldName)
dataset[, index] <- as.character(dataset[, index])
logic <- !is.na(toupper(dataset[, index]))
dataset[logic & toupper(dataset[, index]) == "B", index] <- "9"
dataset[logic & toupper(dataset[, index]) == "M", index] <- "6"
dataset[logic & toupper(dataset[, index]) == "K", index] <- "3"
dataset[logic & toupper(dataset[, index]) == "H", index] <- "2"
dataset[logic & toupper(dataset[, index]) == "", index] <- "0"
dataset[, index] <- as.numeric(dataset[, index])
dataset[is.na(dataset[, index]), index] <- 0
dataset <- cbind(dataset, dataset[, index - 1] * 10^dataset[, index])
names(dataset)[totalLen + 1] <- newFieldName
return(dataset)
}
#smallDataSource <- dataSource[dataSource$YEAR >= 1990, ]
fatalities <- sortUtil("FATALITIES", 20, smallDataSource)
injuries <- sortUtil("INJURIES", 20, smallDataSource)
smallDataSource <- unitsConververUtil(smallDataSource, "PROPDMGEXP", "PROPERTYDAMAGE")
smallDataSource <- unitsConververUtil(smallDataSource, "CROPDMGEXP", "CROPDAMAGE")
names(smallDataSource)
options(scipen=999)
property <- sortUtil("PROPERTYDAMAGE", 20, smallDataSource)
crop <- sortUtil("CROPDAMAGE", 20, smallDataSource)
ggplot(data=fatalities, aes(x=EVTYPE, y=FATALITIES)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=property, aes(x=EVTYPE, y=INJURIES)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=property, aes(x=EVTYPE, y=PROPERTYDAMAGE)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data=crop, aes(x=EVTYPE, y=CROPDAMAGE)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(imputeMissings)
library(utils)
library(plyr)
library(grid)
#options(scipen = 1)
setwd("~/datascience/Course \V/Assigment-2")
if(!file.exists('./data/repdata-data-StormData.csv')){
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(url=url, destfile='./data/repdata-data-StormData.csv.bz2', method='curl')
filePath <- "./data/repdata-data-StormData.csv.bz2"
destPath <- "./data/repdata-data-StormData.csv"
bunzip2(filePath,destPath,overwrite=TRUE, remove=FALSE)
}
csvStromData = read.csv("./data/repdata-data-StormData.csv", sep = ",")
requiredColNames <- c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
dataSource <- csvStromData[, requiredColNames]
dataSource$YEAR <- as.numeric(format(as.Date(dataSource$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
sortUtil <- function(fieldName, top, dataset) {
index <- which(colnames(dataset) == fieldName)
field <- aggregate(dataset[, index], by = list(dataset$EVTYPE), FUN = "sum")
names(field) <- c("EVTYPE", fieldName)
field <- arrange(field, field[, 2], decreasing = T)
field <- head(field, n = top)
field <- within(field, EVTYPE <- factor(x = EVTYPE, levels = field$EVTYPE))
return(field)
}
unitsConververUtil <- function(dataset, fieldName, newFieldName) {
totalLen <- dim(dataset)[2]
index <- which(colnames(dataset) == fieldName)
dataset[, index] <- as.character(dataset[, index])
logic <- !is.na(toupper(dataset[, index]))
dataset[logic & toupper(dataset[, index]) == "B", index] <- "9"
dataset[logic & toupper(dataset[, index]) == "M", index] <- "6"
dataset[logic & toupper(dataset[, index]) == "K", index] <- "3"
dataset[logic & toupper(dataset[, index]) == "H", index] <- "2"
dataset[logic & toupper(dataset[, index]) == "", index] <- "0"
dataset[, index] <- as.numeric(dataset[, index])
dataset[is.na(dataset[, index]), index] <- 0
dataset <- cbind(dataset, dataset[, index - 1] * 10^dataset[, index])
names(dataset)[totalLen + 1] <- newFieldName
return(dataset)
}
#smallDataSource <- dataSource[dataSource$YEAR >= 1990, ]
fatalities <- sortUtil("FATALITIES", 20, dataSource)
injuries <- sortUtil("INJURIES", 20, dataSource)
dataSource <- unitsConververUtil(dataSource, "PROPDMGEXP", "PROPERTYDAMAGE")
dataSource <- unitsConververUtil(dataSource, "CROPDMGEXP", "CROPDAMAGE")
names(dataSource)
options(scipen=999)
property <- sortUtil("PROPERTYDAMAGE", 20, dataSource)
crop <- sortUtil("CROPDAMAGE", 20, dataSource
source('~/dataScience/Course V/Assigment-2/Reproducible-Research-Assigment-2.R')
crop <- sortUtil("CROPDAMAGE", 20, dataSource)
source('~/dataScience/Course V/Assigment-2/Reproducible-Research-Assigment-2.R')
source('~/dataScience/Course V/Assigment-2/Reproducible-Research-Assigment-2.R')
View(csvStromData)
View(injuries)
ggplot(data=injuries, aes(x=EVTYPE, y=INJURIES)) +
geom_bar(stat="identity") + xlab("Event type") + ylab("Total fatalities") +
ggtitle("Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
